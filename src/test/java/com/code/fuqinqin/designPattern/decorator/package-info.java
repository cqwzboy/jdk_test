/**
 * <p>
 *     装饰（Decorator）模式标准定义：动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。
 *
 *     具备四种角色：
 *     ① 抽象构件角色。模式中超类接口，被装饰者和装饰者都需要实现它。
 *     ② 具体构件角色。亦即被装饰者，该模式的目的就是为了不改动该角色的前提下提供扩展功能。
 *     ③ 装饰角色。抽象类或接口，具体扩展功能的承载体。实现或者继承抽象构件角色，并且将抽象构件角色作为属性注入，这个特性很重要。
 *     ④ 具体装饰角色。具体扩展功能的承载体。
 *
 *     举例：想给不同形状的物体（球、长方体）动态赋予不同的颜色。
 *     抽象：形状物体就是抽象构件角色，
 *          具体构件角色就是球或长方体，
 *          颜色就是装饰角色，
 *          具体颜色（红黄蓝）就是具体装饰角色
 * </p>
 *
 * @author fuqinqin3
 * @date 2021/1/25 17:37
 * @version 1.0
 */
package com.code.fuqinqin.designPattern.decorator;